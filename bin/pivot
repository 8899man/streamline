#!/bin/bash

# Home Dir
base_dir=$(dirname $0)/..

#if HDP_DIR is not set its a dev env.
if [ "x$HDP_DIR" = "x" ]; then
    STREAMLINE_HOME=$base_dir
    PID_DIR=$base_dir/logs
    LOG_DIR=$base_dir/logs
    mkdir -p $LOG_DIR
else
    STREAMLINE_HOME=$HDP_DIR/streamline
fi

[ -z $MAX_WAIT_TIME ] && MAX_WAIT_TIME=120

# Streamline env script
. $STREAMLINE_HOME/conf/streamline-env.sh

#Streamline PID
PID=0

# Start, stop, status
PIVOT_LAUNCH_COMMAND=$1

# User Name for setup parameter
[ -z $PIVOT_USER ] && PIVOT_USER=streamline

#App name
APP_NAME=pivot

PIVOT_START_CMD="$STREAMLINE_HOME/bin/pivot-server-start -c $STREAMLINE_HOME/conf/streamline.yaml"

#Name of PID file
[ -z $PID_DIR ] && PID_DIR="/var/run/$APP_NAME"
[ -z $LOG_DIR ] && LOG_DIR="/var/log/$APP_NAME"

#Name of PID file
PID_FILE="$PID_DIR/$APP_NAME.pid"
#Name of LOG/OUT/ERR file
OUT_FILE="$LOG_DIR/$APP_NAME.out"
ERR_FILE="$LOG_DIR/$APP_NAME.err"


function main {
   case "$1" in
      start)
         pivotStart
         ;;
      stop)
         pivotStop
         ;;
      status)
         pivotStatus
         ;;
      clean)
         pivotClean
         ;;
      *)
         printf "Usage: $0 {start|stop|status|clean}\n"
         ;;
   esac
}

function pivotStart {

   getPID
   if [ $? -eq 0 ]; then
     printf "Pivot is already running with PID=$PID.\n"
     exit 0
   fi

   printf "Starting Pivot "

   rm -f $PID_FILE
   su $STREAMLINE_USER -c "nohup $PIVOT_START_CMD >>$OUT_FILE 2>>$ERR_FILE & echo \$! > $PID_FILE"

   getPID
   pivotIsRunning $PID
   if [ $? -ne 1 ]; then
      printf "failed.\n"
      exit 1
   fi

   printf "succeeded with PID=$PID.\n"
   return 0
}

function pivotStop {
   getPID
   pivotIsRunning $PID
   if [ $? -eq 0 ]; then
     printf "Pivot is not running.\n"
     rm -f $PID_FILE
     return 0
   fi

   printf "Stopping Pivot [$PID] "
   pivotKill $PID >>$OUT_FILE 2>>$ERR_FILE

   if [ $? -ne 0 ]; then
     printf "failed. \n"
     exit 1
   else
     rm -f $PID_FILE
     printf "succeeded.\n"
     return 0
   fi
}

function pivotStatus {
   printf "Pivot "
   getPID
   if [ $? -eq 1 ]; then
     printf "is not running. No pid file found.\n"
     return 0
   fi

   pivotIsRunning $PID
   if [ $? -eq 1 ]; then
     printf "is running with PID=$PID.\n"
     exit 1
   else
     printf "is not running.\n"
     return 0
   fi
}

# Removed the Streamline PID file if Streamline is not running
function pivotClean {
   getPID
   pivotIsRunning $PID
   if [ $? -eq 0 ]; then
     deleteLogFiles
     return 0
   else
     printf "Can't clean files.  Pivot is running with PID=$PID.\n"
     exit 1
   fi
}

# Returns 0 if the Knox is running and sets the $PID variable.
function getPID {
   if [ ! -d $PID_DIR ]; then
      printf "Can't find pid dir.\n"
      exit 1
   fi
   if [ ! -f $PID_FILE ]; then
     PID=0
     return 1
   fi

   PID="$(<$PID_FILE)"
   return 0
}

function pivotIsRunning {
   if [ $1 -eq 0 ]; then return 0; fi

   ps -p $1 > /dev/null

   if [ $? -eq 1 ]; then
     return 0
   else
     return 1
   fi
}

function pivotKill {
   local localPID=$1
   kill $localPID || return 1
   for ((i=0; i<MAX_WAIT_TIME; i++)); do
      pivotIsRunning $localPID
      if [ $? -eq 0 ]; then return 0; fi
      sleep 1
   done

   kill -s KILL $localPID || return 1
   for ((i=0; i<MAX_WAIT_TIME; i++)); do
      pivotIsRunning $localPID
      if [ $? -eq 0 ]; then return 0; fi
      sleep 1
   done

   return 1
}

function createLogFiles {
   if [ ! -d "$LOG_DIR" ]; then
      printf "Can't find log dir.  Run sudo $0 setup.\n"
      exit 1
   fi
   if [ ! -f "$OUT_FILE" ]; then su $STREAMLINE_USER -c "touch $OUT_FILE"; fi
   if [ ! -f "$ERR_FILE" ]; then su $STREAMLINE_USER -c "touch $ERR_FILE"; fi
}

function deleteLogFiles {
     rm -f $PID_FILE
     printf "Removed the STREAMLINE PID file: $PID_FILE.\n"

     rm -f $OUT_FILE
     printf "Removed the STREAMLINE OUT file: $OUT_FILE.\n"

     rm -f $ERR_FILE
     printf "Removed the STREAMLINE ERR file: $ERR_FILE.\n"
}

#Starting main
main $PIVOT_LAUNCH_COMMAND


