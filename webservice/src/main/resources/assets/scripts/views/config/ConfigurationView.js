define([
  'require',
  'hbs!tmpl/config/configurationView',
  'utils/Utils',
  'collection/VComponentList',
  'models/VCluster',
  'models/VComponent',
  'utils/TableLayout',
  'utils/LangSupport',
  'modules/Modal',
  'bootbox'
  ], function(require, tmpl, Utils, VComponentList, VCluster, VComponent, VTableLayout, localization, Modal, bootbox){
  'use strict';

  var vConfigView = Marionette.LayoutView.extend({
    template: tmpl,
    templateHelpers: function() {
      return {
        showStormBtn: this.showStormBtn,
        showKafkaBtn: this.showKafkaBtn,
        stormCompObj: this.stormCompObj,
        kafkaCombObj: this.kafkaCompObj
      };
    },
    regions: {},
    events: {
      'click #btnStorm': 'createStormComponent',
      'click #btnKafka': 'createKafkaComponent',
      'click #editStorm': 'editStormComponent',
      'click #editKafka': 'editKafkaComponent'
    },
    
    initialize: function(options) {
      var self = this;
      _.extend(this, _.pick(options, 'clusterCollection','showStormBtn','showKafkaBtn'));
      if(this.clusterCollection.models.length){
        _.each(this.clusterCollection.models, function(model){
          self.fetchComponent(model.get('type'), model.get('id'));
        });
      }
    },
    
    onRender: function(){ },
    
    fetchComponent: function(type, id){
      var compCollection = new VComponentList();
      compCollection.url = VComponentList.prototype.url + id + "/components";
      compCollection.fetch({
        async: false
      });
      if(type === 'STORM'){
        this.stormCompObj = compCollection.models[0].attributes;
      } else if(type ==='KAFKA'){
        this.kafkaCompObj = compCollection.models[0].attributes;
      }
    },

    createStormCluster: function(componentModel){
      var self = this;
      var model = new VCluster();
      model.set('name','auto_StormCluster');
      model.set('description', 'This is auto generated Storm cluster');
      model.set('type','STORM');
      model.set('tags','autogenerated,storm');
      model.save({},{
        success:function(model, response, options){
          self.stormClusterObj = response.entity;
          self.saveStormComponent(componentModel, self.stormClusterObj);
        }, 
        error: function(model, response, options){
          Utils.showError(model, response);
         }
       });
     },

     createStormComponent: function(){
      var self = this;
      var model = new VComponent();
      require(['views/config/ComponentForm'], function(ComponentForm){
        self.view = new ComponentForm({
          model: model,
          type: 'STORM'
        });

        var saveCallback = function(){
          var errs = self.view.validate();
          if(_.isEmpty(errs)){
            self.createStormCluster(self.view.getData());
          } else {
            return false;
          }
        };
        
        var modal = new Modal({
          title: 'Enter Component Details',
          content: self.view,
          showFooter: true,
          okText: 'Save',
          cancelText: 'Cancel',
          okCloses : false
        }).open(saveCallback);

        self.view.on('closeModal',function(){
          modal.trigger('cancel');
        });
      });
     },

    saveStormComponent: function(componentModel, clusterObj){
      var that = this;
      var msg;
      if(componentModel.has('id')){
        msg = localization.tt('dialogMsg.componentUpdatedSuccessfully');
      } else {
        msg = localization.tt('dialogMsg.newComponentAddedSuccessfully');
       }
       componentModel.urlRoot = VComponent.prototype.urlRoot + clusterObj.id + "/components";
       componentModel.save({},{
        success:function(model, response, options){
          Utils.notifySuccess(msg);
          that.showStormBtn = false;
          that.view.trigger('closeModal');
          that.stormCompObj = response.entity;
          that.render();
        }, 
        error: function(model, response, options){
          Utils.showError(model, response);
          that.view.trigger('closeModal');
        }
      });
    },

    createKafkaComponent: function(){
      var self = this;
      var model = new VComponent();
      require(['views/config/ComponentForm'], function(ComponentForm){
        self.view = new ComponentForm({
            model: model,
            type: 'KAFKA'
         });
 
        var saveCallback = function(){
          var errs = self.view.validate();
          if(_.isEmpty(errs)){
            self.createKafkaCluster(self.view.getData());
          } else {
            return false;
          }
        };

        var modal = new Modal({
          title: 'Enter Component Details',
          content: self.view,
          showFooter: true,
          okText: 'Save',
          cancelText: 'Cancel',
           okCloses : false
          }).open(saveCallback);

        self.view.on('closeModal',function(){
           modal.trigger('cancel');
        });

       });
     },

    createKafkaCluster: function(componentModel){
      var self = this;
      var model = new VCluster();
      model.set('name','auto_KafkaCluster');
      model.set('description', 'This is auto generated Kafka cluster');
      model.set('type','KAFKA');
      model.set('tags','autogenerated,kafka');
      model.save({},{
        success:function(model, response, options){
          self.kafkaClusterObj = response.entity;
          self.saveKafkaComponent(componentModel, self.kafkaClusterObj);
        }, 
        error: function(model, response, options){
          Utils.showError(model, response);
        }
      });
     },

     saveKafkaComponent: function(componentModel, clusterObj){
      var that = this;
      var msg;
      if(componentModel.has('id')){
        msg = localization.tt('dialogMsg.componentUpdatedSuccessfully');
      } else {
        msg = localization.tt('dialogMsg.newComponentAddedSuccessfully');
      }
      componentModel.urlRoot = VComponent.prototype.urlRoot + clusterObj.id + "/components";
      componentModel.save({},{
        success:function(model, response, options){
          Utils.notifySuccess(msg);
          that.showKafkaBtn = false;
          that.view.trigger('closeModal');
          that.kafkaCompObj = response.entity;
          that.render();
        }, 
        error: function(model, response, options){
          Utils.showError(model, response);
          that.view.trigger('closeModal');
         }
       });
     },

     editKafkaComponent: function(){
      var self = this;
      var model = new VComponent(self.kafkaCompObj);
      require(['views/config/ComponentForm'], function(ComponentForm){
        self.view = new ComponentForm({
          model: model,
          type: 'KAFKA'
        });

        var saveCallback = function(){
          var errs = self.view.validate();
          if(_.isEmpty(errs)){
            self.saveKafkaComponent(self.view.getData(), self.kafkaClusterObj);
          } else {
            return false;
          }
        };
        
        var modal = new Modal({
          title: 'Update Component Details',
          content: self.view,
          showFooter: true,
          okText: 'Save',
          cancelText: 'Cancel',
          okCloses : false
        }).open(saveCallback);

        self.view.on('closeModal',function(){
          modal.trigger('cancel');
        });

      });
     },
 
    editStormComponent: function(){
      var self = this;
      var model = new VComponent(self.stormCompObj);
      require(['views/config/ComponentForm'], function(ComponentForm){
        self.view = new ComponentForm({
          model: model,
          type: 'STORM'
        });

        var saveCallback = function(){
          var errs = self.view.validate();
          if(_.isEmpty(errs)){
            self.saveStormComponent(self.view.getData(), self.stormClusterObj);
          } else {
            return false;
          }
        };
        
        var modal = new Modal({
          title: 'Update Component Details',
          content: self.view,
          showFooter: true,
          okText: 'Save',
          cancelText: 'Cancel',
          okCloses : false
        }).open(saveCallback);

        self.view.on('closeModal',function(){
          modal.trigger('cancel');
        });

      });
    }

  });
  return vConfigView;
});